[["introdution.html", "Mapping single-cell RNA-sequencing data on tissue using computations Introdution Sources of inspiration Bibliography", " Mapping single-cell RNA-sequencing data on tissue using computations Lorette Noiret, Nathalie Lehmann, Eric van Leen 2021-02-09 Introdution Objectives : Yesterday, we saw how to pre-process single cell rna sequencing data (Drop-seq) to extract “high quality cells”. Today, we will explore further a similar dataset and use a computional approach called novoSparc to reconstruct the spatial transcriptome. Before performing an advanced technic such as spatial transcriptomics, it is good to have some kind of validation. So as the first step, we will visualize co-expressed genes in UMAP and see if we can find the same co-expression in our predicted spatial transcriptome. In this pratical session, you will learn : how to visualize co-expressed genes in UMAP ; how to map dissociated single cells back to their tissue of origin using novoSpaRc (de novo Spatial Reconstruction of Single-Cell Gene Expression). We will be using one of the dataset publilshied with Nitizan et al (Nature 2019). The data are alreay filtered (“high quality cells”) and log-normalized. Sources of inspiration This course material is based on Novosparc tutorial on github: novosparc tutorial: reconstruct_drosophila_embryo_tutorial.ipynb Bibliography Karaiskos et al.The Drosophila embryo at single-cell transcriptome resolution. Science13 Oct 2017 : 194-199 Nitzan et al. Gene expression cartography. Nature.2019 Dec;576(7785):132-137. Tutorial working with Python in R "],["what-to-install.html", " 1 What to install", " 1 What to install If you work from your local computer, you need : Install the following R library using the console : install.package(“devtool”) : to get the install_github function install_github(“rstudio/reticulate”) : to install the dev version of reticulate and work with Python in R install.package(“bookdown”) (to have a cool notebook at the end) install.package(“knitr”) : to manange the outputs (figures..) install.package(“Seurat”) : useful to analyse scRNAseq data in R Install in Python3 using “Terminal” pip3 install numpy : to manipulate data arry pip3 install matplotlib : for graphs pip3 install novosparc : for sc mapping pip3 install anndata : : useful to analyse scRNAseq data in Python "],["working-in-python-in-rstudio.html", " 2 Working in Python in RStudio", " 2 Working in Python in RStudio RStudio makes it easy to combine R and Python in a single data science project thanks to the package “reticulate”. You just need to specify the language you want to use at the beginning of the chunk. library(reticulate) # to use Python through a R framework library(knitr) knitr::knit_engines$set(python=reticulate::eng_python) # optional : check the version of Python that you are using (not useful for this workshop) # use_python(&quot;/usr/local/bin/python3.6&quot;, required = TRUE) To import package from Python, the syntax is a bit different: import numpy as np # we use the alias np to call function from the package numpy #import novosparc import matplotlib.pyplot as plt #import anndata as an Create a variable x in Python : x = np.array([1,2,3]) print(x) Use the variable x in R by adding py$ in front of the variable name py$x ## NULL You can also create a new variable y in the Python session using R, and pass a data frame to y: py$y &lt;- head(cars) # cars is a dataset which is pre-installed in R Print the variable y in Python: print(y) "],["basic-vizualization.html", " 3 Basic vizualization 3.1 Import data in Seurat 3.2 A quick reminder on SeuratObject 3.3 Perform dimension reductions", " 3 Basic vizualization In this section, we will perfome some basic analyses of the dataset provided in Nitizan et al. using Seurat. We will visualize the cells in a reduced space using UMAP and visualize the expression of some genes. If you are not familiar with Seurat object and scRNAseq pre-processing, you can look at yesterday’s tutorial, which is available on github. 3.1 Import data in Seurat library(Seurat) library(ggplot2) library(org.Dm.eg.db) library(clusterProfiler) We import the log-normalized high quality cells as a dataframe and then convert the dataframe to a Seurat object. log.nrmlz.matrix &lt;- read.table(&quot;data/data_day2/drosophila_scRNAseq/dge_normalized.txt&quot;, sep=&#39;\\t&#39;, row.names=1) dim(log.nrmlz.matrix) ## [1] 1963 1297 print(log.nrmlz.matrix[1:3,1:4]) ## GTACTAATTACN_2 AGGCTAATGGAC_3 TAGACAAAAGCT_4 TCTACTAGTGTN_5 ## 128up 2.570 2.509 0.000 0.000 ## 140up 1.160 3.007 0.000 0.000 ## 14-3-3epsilon 8.838 8.788 8.843 8.869 We have 1963 genes and 1297 cells dataset &lt;- CreateSeuratObject(counts = log.nrmlz.matrix) 3.2 A quick reminder on SeuratObject In Seurat, data are organised in different compartements (slots), which contains them-selves several compartements, which can them-selves contain sub compartments… slotNames(dataset) ## [1] &quot;assays&quot; &quot;meta.data&quot; &quot;active.assay&quot; &quot;active.ident&quot; &quot;graphs&quot; ## [6] &quot;neighbors&quot; &quot;reductions&quot; &quot;images&quot; &quot;project.name&quot; &quot;misc&quot; ## [11] &quot;version&quot; &quot;commands&quot; &quot;tools&quot; Each compartment can be used to store: data from multiple modalities, such as RNAseq (slot assays, sub-slot RNA), ATAC-seq… results of analyses: dimension reduction, clustering … etc. You navigate through this hierarchy using @ and $ signs. slotNames(dataset@assays$RNA) ## [1] &quot;counts&quot; &quot;data&quot; &quot;scale.data&quot; &quot;key&quot; ## [5] &quot;assay.orig&quot; &quot;var.features&quot; &quot;meta.features&quot; &quot;misc&quot; If you want to have a closer look at the data structure of the Seurat object, the R command str() might be very helpful: str(dataset) ## Formal class &#39;Seurat&#39; [package &quot;Seurat&quot;] with 13 slots ## ..@ assays :List of 1 ## .. ..$ RNA:Formal class &#39;Assay&#39; [package &quot;Seurat&quot;] with 8 slots ## .. .. .. ..@ counts :Formal class &#39;dgCMatrix&#39; [package &quot;Matrix&quot;] with 6 slots ## .. .. .. .. .. ..@ i : int [1:1194477] 0 1 2 3 4 7 8 11 15 16 ... ## .. .. .. .. .. ..@ p : int [1:1298] 0 1445 2686 3841 4946 6084 7162 8255 9308 10342 ... ## .. .. .. .. .. ..@ Dim : int [1:2] 1963 1297 ## .. .. .. .. .. ..@ Dimnames:List of 2 ## .. .. .. .. .. .. ..$ : chr [1:1963] &quot;128up&quot; &quot;140up&quot; &quot;14-3-3epsilon&quot; &quot;14-3-3zeta&quot; ... ## .. .. .. .. .. .. ..$ : chr [1:1297] &quot;GTACTAATTACN_2&quot; &quot;AGGCTAATGGAC_3&quot; &quot;TAGACAAAAGCT_4&quot; &quot;TCTACTAGTGTN_5&quot; ... ## .. .. .. .. .. ..@ x : num [1:1194477] 2.57 1.16 8.84 5.94 3.44 ... ## .. .. .. .. .. ..@ factors : list() ## .. .. .. ..@ data :Formal class &#39;dgCMatrix&#39; [package &quot;Matrix&quot;] with 6 slots ## .. .. .. .. .. ..@ i : int [1:1194477] 0 1 2 3 4 7 8 11 15 16 ... ## .. .. .. .. .. ..@ p : int [1:1298] 0 1445 2686 3841 4946 6084 7162 8255 9308 10342 ... ## .. .. .. .. .. ..@ Dim : int [1:2] 1963 1297 ## .. .. .. .. .. ..@ Dimnames:List of 2 ## .. .. .. .. .. .. ..$ : chr [1:1963] &quot;128up&quot; &quot;140up&quot; &quot;14-3-3epsilon&quot; &quot;14-3-3zeta&quot; ... ## .. .. .. .. .. .. ..$ : chr [1:1297] &quot;GTACTAATTACN_2&quot; &quot;AGGCTAATGGAC_3&quot; &quot;TAGACAAAAGCT_4&quot; &quot;TCTACTAGTGTN_5&quot; ... ## .. .. .. .. .. ..@ x : num [1:1194477] 2.57 1.16 8.84 5.94 3.44 ... ## .. .. .. .. .. ..@ factors : list() ## .. .. .. ..@ scale.data : num[0 , 0 ] ## .. .. .. ..@ key : chr &quot;rna_&quot; ## .. .. .. ..@ assay.orig : NULL ## .. .. .. ..@ var.features : logi(0) ## .. .. .. ..@ meta.features:&#39;data.frame&#39;: 1963 obs. of 0 variables ## .. .. .. ..@ misc : NULL ## ..@ meta.data :&#39;data.frame&#39;: 1297 obs. of 3 variables: ## .. ..$ orig.ident : Factor w/ 1 level &quot;SeuratProject&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## .. ..$ nCount_RNA : num [1:1297] 5057 4711 4728 4562 4569 ... ## .. ..$ nFeature_RNA: int [1:1297] 1445 1241 1155 1105 1138 1078 1093 1053 1034 1047 ... ## ..@ active.assay: chr &quot;RNA&quot; ## ..@ active.ident: Factor w/ 1 level &quot;SeuratProject&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## .. ..- attr(*, &quot;names&quot;)= chr [1:1297] &quot;GTACTAATTACN_2&quot; &quot;AGGCTAATGGAC_3&quot; &quot;TAGACAAAAGCT_4&quot; &quot;TCTACTAGTGTN_5&quot; ... ## ..@ graphs : list() ## ..@ neighbors : list() ## ..@ reductions : list() ## ..@ images : list() ## ..@ project.name: chr &quot;SeuratProject&quot; ## ..@ misc : list() ## ..@ version :Classes &#39;package_version&#39;, &#39;numeric_version&#39; hidden list of 1 ## .. ..$ : int [1:3] 3 2 3 ## ..@ commands : list() ## ..@ tools : list() The structure of the Seurat object also reflects the pre-processing steps. The scRNAseq workflow consists of 3 main steps : start with raw expression matrix (UMIs after sequencing) and filter out “low quality cells” : data are stored in the compartement counts; log-normalize the data: to correct for sequencing biais : data perform a dimension reduction such as PCA to reduce the computation time and unnecessary information. PCA requires the data to be normalized and scaled : scale.data. 3.3 Perform dimension reductions When analysing scRNAseq data, you will usually perform some clustering to identify sub-populations and use some technique for visualization (e.g. UMAP). These analyses are performed on a lower dimensional space. Here we perform a PCA on the list of highly variable genes provided by the authors. list_hvg = read.csv(&quot;data/data_day2/drosophila_scRNAseq/high_var_genes.txt&quot;, header=FALSE) dataset &lt;- ScaleData(dataset) dataset &lt;- RunPCA(dataset, features = list_hvg$V1) DimPlot(dataset, reduction = &quot;pca&quot;) sum(dataset@reductions$pca@stdev[1:35]) ## [1] 49.57188 nPC = 35 # number of PC kept for the analysis n.neighbours = 15 resol = 0.4 # impact the number of clusters # k-nn graph dataset &lt;- FindNeighbors(dataset, k.param = n.neighbours,dims = 1:nPC) ## Computing nearest neighbor graph ## Computing SNN # make the clusters dataset &lt;- FindClusters(dataset, resolution = resol) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 1297 ## Number of edges: 52276 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8298 ## Number of communities: 6 ## Elapsed time: 0 seconds dataset &lt;- RunUMAP(dataset, dims = 1:nPC) ## Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric ## To use Python UMAP via reticulate, set umap.method to &#39;umap-learn&#39; and metric to &#39;correlation&#39; ## This message will be shown once per session ## 13:24:14 UMAP embedding parameters a = 0.9922 b = 1.112 ## 13:24:14 Read 1297 rows and found 35 numeric columns ## 13:24:14 Using Annoy for neighbor search, n_neighbors = 30 ## 13:24:14 Building Annoy index with metric = cosine, n_trees = 50 ## 0% 10 20 30 40 50 60 70 80 90 100% ## [----|----|----|----|----|----|----|----|----|----| ## **************************************************| ## 13:24:14 Writing NN index file to temp file /tmp/Rtmp0xxBlD/file1f2e4464a8be8c ## 13:24:14 Searching Annoy index using 1 thread, search_k = 3000 ## 13:24:15 Annoy recall = 100% ## 13:24:15 Commencing smooth kNN distance calibration using 1 thread ## 13:24:16 Initializing from normalized Laplacian + noise ## 13:24:16 Commencing optimization for 500 epochs, with 50690 positive edges ## 13:24:20 Optimization finished DimPlot(dataset, reduction = &quot;umap&quot;) With the function FeaturePlot you can visualize the expression of some gene of interest on th UMAP: FeaturePlot(object = dataset, features = c(&#39;twi&#39;,&#39;zen&#39;,&#39;aay&#39;, &#39;Antp&#39;), cols = c(&quot;grey&quot;, &quot;blue&quot;), reduction = &quot;umap&quot;, pt.size = 0.2) You can define here two genes that you wish to see of the next plots (so you don’t have to change the gene names in the plot functions). gene1 &lt;- &#39;twi&#39; gene2 &lt;- &#39;aay&#39; Let’s have a look at the correlation between these two genes: FeatureScatter(object = dataset, feature1 = gene1, feature2 = gene2) p &lt;- FeaturePlot(object = dataset, features = c(gene1, gene2), cols = c(&#39;grey&#39;, &#39;red&#39;, &#39;blue&#39;), reduction = &quot;umap&quot;, order = TRUE, pt.size = 0.5, combine = FALSE, blend = TRUE) print(p[[3]] + NoLegend()) pp &lt;- FeaturePlot(object = dataset, features = c(gene1, gene2), cols = c(&#39;white&#39;, &#39;red&#39;, &#39;blue&#39;), reduction = &quot;umap&quot;, order = TRUE, pt.size = 0.5, combine = FALSE, blend = TRUE) print(pp[[3]] + NoLegend()) "],["group-discussion.html", " 4 Group discussion 4.1 Interpretation PC axes", " 4 Group discussion How could you identify the genes specifically expressed in one cluster ? Play with the colors of the plots. How much can this impact the resulting UMAP ? Try to find genes that are co-expressed (or anti-correlated) in this dataset. 4.1 Interpretation PC axes 4.1.1 Link with nUMI and nFeature # Add PCs coordinates as a metadata dataset &lt;- AddMetaData(dataset, dataset@reductions$pca@cell.embeddings, colnames(dataset@reductions$pca@cell.embeddings)) # Add UMAP coordinates as a metadata dataset &lt;- AddMetaData(dataset, dataset@reductions$umap@cell.embeddings, colnames(dataset@reductions$umap@cell.embeddings)) # Check you have the PC aggregated to the metadata head(dataset[[]])[1:10] ## orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.4 ## GTACTAATTACN_2 SeuratProject 5056.723 1445 2 ## AGGCTAATGGAC_3 SeuratProject 4711.185 1241 0 ## TAGACAAAAGCT_4 SeuratProject 4727.516 1155 1 ## TCTACTAGTGTN_5 SeuratProject 4561.512 1105 2 ## CCGTGCTGAACA_3 SeuratProject 4569.284 1138 0 ## GAGAAAATGAAG_7 SeuratProject 4528.382 1078 1 ## seurat_clusters PC_1 PC_2 PC_3 PC_4 ## GTACTAATTACN_2 2 0.8901358 1.7567252 -2.6676502 5.054322 ## AGGCTAATGGAC_3 0 2.0935612 2.6764714 -1.2593752 1.026615 ## TAGACAAAAGCT_4 1 -2.0516447 -0.1691875 2.3202232 4.824665 ## TCTACTAGTGTN_5 2 0.8153851 1.6728201 -5.6104631 2.608583 ## CCGTGCTGAACA_3 0 -1.0697989 2.3039091 2.9484302 1.376591 ## GAGAAAATGAAG_7 1 -1.1697802 0.1742288 0.9408307 1.676755 ## PC_5 ## GTACTAATTACN_2 0.33856502 ## AGGCTAATGGAC_3 0.31540995 ## TAGACAAAAGCT_4 0.01278697 ## TCTACTAGTGTN_5 -0.50347780 ## CCGTGCTGAACA_3 0.08532385 ## GAGAAAATGAAG_7 -2.77752873 FeaturePlot(object = dataset, features = &quot;nCount_RNA&quot;,reduction = &quot;pca&quot;) FeaturePlot(object = dataset, features = &quot;nFeature_RNA&quot;,reduction = &quot;pca&quot;) ggplot(dataset[[]], aes(x=PC_1, y=PC_2, color = seurat_clusters)) + geom_point(aes(size = nCount_RNA)) + geom_rug() ggplot(dataset[[]], aes(x=UMAP_1, y=UMAP_2, color = seurat_clusters)) + geom_point(aes(size = nCount_RNA)) + geom_rug() # Extract PC gene loadings for the 10 first components PC_df &lt;- dataset@reductions$pca@feature.loadings[,1:10] # Select PC to work with nPC &lt;- 1 # Select highest 5 genes in PC1 list_topVarPC1_plus &lt;- sort(PC_df[,paste0(&#39;PC_&#39;, nPC)], decreasing = TRUE)[1:5] list_topVarPC1_minus &lt;- sort(PC_df[,paste0(&#39;PC_&#39;, nPC)], decreasing = FALSE)[1:5] list_topVarPC1_plus ## Ptr sdt aop 5-HT2A veil ## 0.2041575 0.1794579 0.1573053 0.1562678 0.1454172 list_topVarPC1_minus ## twi ventrally-expressed-protein-D ## -0.2207021 -0.2158339 ## sna stumps ## -0.2152931 -0.2063053 ## zfh1 ## -0.2051081 4.1.2 Enrichement CallGroupGo = function(list_genes){ # groupGO return the GO profile at a specific level· eg = bitr(list_genes, fromType=&quot;SYMBOL&quot;, toType=c(&quot;FLYBASE&quot;,&quot;ENTREZID&quot;), OrgDb=&quot;org.Dm.eg.db&quot;) # copy to clipboard for comparison with online app #write_clip(list_topVarPC1) ggo &lt;- groupGO(gene = na.omit(eg$ENTREZID), OrgDb = org.Dm.eg.db, ont = &quot;BP&quot;, level = 3, readable = TRUE) return(ggo) } CallEnrichGo = function(list_genes,pval,qval){ #return the enrichment GO categories after FDR control.· eg = bitr(list_genes, fromType=&quot;SYMBOL&quot;, toType=c(&quot;FLYBASE&quot;,&quot;ENTREZID&quot;), OrgDb=&quot;org.Dm.eg.db&quot;) ego &lt;- enrichGO(gene = na.omit(eg$ENTREZID), OrgDb = org.Dm.eg.db, ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = pval, qvalueCutoff = qval, readable = TRUE) return(ego) } CallKeggPath = function(list_genes){ #return the enrichment GO categories after FDR control.· eg = bitr(list_genes, fromType=&quot;SYMBOL&quot;, toType=c(&quot;FLYBASE&quot;,&quot;ENTREZID&quot;), OrgDb=&quot;org.Dm.eg.db&quot;) kk&lt;- enrichKEGG(gene = na.omit(eg$ENTREZID), organism = org.Dm.eg.db, pvalueCutoff = 0.01, use_internal_data = TRUE) return(kk) } ego1p = CallEnrichGo(list_topVarPC1_plus,0.01,0.05) ego1m = CallEnrichGo(list_topVarPC1_minus,0.01,0.05) ego2 = CallEnrichGo(list_topVarPC2,0.02,0.15) ego2p = CallEnrichGo(list_topVarPC2_plus,0.01,0.05) ego2m = CallEnrichGo(list_topVarPC2_minus,0.01,0.05) ego3 = CallEnrichGo(list_topVarPC3,0.02,0.15) ego3p = CallEnrichGo(list_topVarPC3_plus,0.01,0.05) ego3m = CallEnrichGo(list_topVarPC3_minus,0.01,0.05) #barplot(ggo1, drop=TRUE, showCategory=10,main = &quot;Genes associated with PC1&quot;) barplot(ego1, showCategory=25, main =&quot;enrich genes PC1&quot;) barplot(ego1p, showCategory=25, main =&quot;enrich genes PC1&quot;) barplot(ego1m, showCategory=25, main =&quot;enrich genes PC1&quot;) "],["session-info.html", " 5 Session info", " 5 Session info ## R version 4.0.3 (2020-10-10) ## Platform: x86_64-conda-linux-gnu (64-bit) ## Running under: Ubuntu 16.04.4 LTS ## ## Matrix products: default ## BLAS/LAPACK: /import/kg_csbws03/lehmann/miniconda3/envs/cellid/lib/libopenblasp-r0.3.12.so ## ## locale: ## [1] LC_CTYPE=fr_FR.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=fr_FR.UTF-8 LC_COLLATE=fr_FR.UTF-8 ## [5] LC_MONETARY=fr_FR.UTF-8 LC_MESSAGES=fr_FR.UTF-8 ## [7] LC_PAPER=fr_FR.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=fr_FR.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] parallel stats4 stats graphics grDevices utils datasets ## [8] methods base ## ## other attached packages: ## [1] clusterProfiler_3.18.0 org.Dm.eg.db_3.12.0 AnnotationDbi_1.52.0 ## [4] IRanges_2.24.1 S4Vectors_0.28.1 Biobase_2.50.0 ## [7] BiocGenerics_0.36.0 ggplot2_3.3.3 Seurat_3.2.3 ## [10] knitr_1.30 reticulate_1.18 ## ## loaded via a namespace (and not attached): ## [1] shadowtext_0.0.7 fastmatch_1.1-0 plyr_1.8.6 ## [4] igraph_1.2.6 lazyeval_0.2.2 splines_4.0.3 ## [7] BiocParallel_1.24.1 listenv_0.8.0 scattermore_0.7 ## [10] digest_0.6.27 htmltools_0.5.1 GOSemSim_2.16.1 ## [13] viridis_0.5.1 GO.db_3.12.1 magrittr_2.0.1 ## [16] memoise_1.1.0 tensor_1.5 cluster_2.1.0 ## [19] ROCR_1.0-11 globals_0.14.0 graphlayouts_0.7.1 ## [22] matrixStats_0.57.0 enrichplot_1.10.2 colorspace_2.0-0 ## [25] blob_1.2.1 ggrepel_0.9.1 xfun_0.20 ## [28] dplyr_1.0.3 crayon_1.3.4 jsonlite_1.7.2 ## [31] scatterpie_0.1.5 spatstat_1.64-1 spatstat.data_1.7-0 ## [34] survival_3.2-7 zoo_1.8-8 glue_1.4.2 ## [37] polyclip_1.10-0 gtable_0.3.0 leiden_0.3.6 ## [40] future.apply_1.7.0 abind_1.4-5 scales_1.1.1 ## [43] DOSE_3.16.0 DBI_1.1.1 miniUI_0.1.1.1 ## [46] Rcpp_1.0.6 viridisLite_0.3.0 xtable_1.8-4 ## [49] bit_4.0.4 rsvd_1.0.3 htmlwidgets_1.5.3 ## [52] httr_1.4.2 fgsea_1.16.0 RColorBrewer_1.1-2 ## [55] ellipsis_0.3.1 ica_1.0-2 pkgconfig_2.0.3 ## [58] farver_2.0.3 uwot_0.1.10 deldir_0.2-9 ## [61] labeling_0.4.2 tidyselect_1.1.0 rlang_0.4.10 ## [64] reshape2_1.4.4 later_1.1.0.1 munsell_0.5.0 ## [67] tools_4.0.3 downloader_0.4 generics_0.1.0 ## [70] RSQLite_2.2.3 ggridges_0.5.3 evaluate_0.14 ## [73] stringr_1.4.0 fastmap_1.0.1 yaml_2.2.1 ## [76] goftest_1.2-2 bit64_4.0.5 fitdistrplus_1.1-3 ## [79] tidygraph_1.2.0 purrr_0.3.4 RANN_2.6.1 ## [82] ggraph_2.0.4 pbapply_1.4-3 future_1.21.0 ## [85] nlme_3.1-151 mime_0.9 DO.db_2.9 ## [88] compiler_4.0.3 rstudioapi_0.13 plotly_4.9.3 ## [91] png_0.1-7 spatstat.utils_1.20-2 tibble_3.0.5 ## [94] tweenr_1.0.1 stringi_1.5.3 RSpectra_0.16-0 ## [97] lattice_0.20-41 Matrix_1.3-2 vctrs_0.3.6 ## [100] pillar_1.4.7 lifecycle_0.2.0 BiocManager_1.30.10 ## [103] lmtest_0.9-38 RcppAnnoy_0.0.18 data.table_1.13.6 ## [106] cowplot_1.1.1 irlba_2.3.3 httpuv_1.5.5 ## [109] patchwork_1.1.1 qvalue_2.22.0 R6_2.5.0 ## [112] bookdown_0.21 promises_1.1.1 KernSmooth_2.23-18 ## [115] gridExtra_2.3 parallelly_1.23.0 codetools_0.2-18 ## [118] MASS_7.3-53 assertthat_0.2.1 withr_2.4.0 ## [121] sctransform_0.3.2 mgcv_1.8-33 grid_4.0.3 ## [124] rpart_4.1-15 tidyr_1.1.2 rvcheck_0.1.8 ## [127] rmarkdown_2.6 Rtsne_0.15 ggforce_0.3.2 ## [130] shiny_1.5.0 "]]
